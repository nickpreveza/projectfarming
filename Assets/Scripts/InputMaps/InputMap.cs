//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputMaps/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""Land"",
            ""id"": ""36b976c1-8773-42ef-b099-0521137260e8"",
            ""actions"": [
                {
                    ""name"": ""ShootWaterGun"",
                    ""type"": ""Button"",
                    ""id"": ""d99d5508-2bd6-409e-b2b3-edade4cd17e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootNormalGun"",
                    ""type"": ""Button"",
                    ""id"": ""d3d321c2-f7e6-4139-af87-7d3e1e962042"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d582c6e4-9206-4c79-912c-c3d69719328a"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""269c5d56-b5ac-4db3-93be-4726ce825df0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlantAllSeeds"",
                    ""type"": ""Button"",
                    ""id"": ""650ae733-98ad-467b-b22a-d9b2d1c841bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RefillWaterGun"",
                    ""type"": ""Button"",
                    ""id"": ""0c995586-44ce-4f4a-afd1-ad7950bfeb2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WaterPlants"",
                    ""type"": ""Button"",
                    ""id"": ""ea58a007-4e80-4adc-82a6-17197b1db937"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateWaterGun"",
                    ""type"": ""Button"",
                    ""id"": ""1b317804-398e-4dd5-8895-e110c0126db1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateNormalGun"",
                    ""type"": ""Button"",
                    ""id"": ""018aee05-ccb0-42c3-ae40-98b20d7c6b57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUpItem"",
                    ""type"": ""Button"",
                    ""id"": ""79083643-2882-4e15-88d2-7614ae42ed38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInventory"",
                    ""type"": ""Button"",
                    ""id"": ""597291fd-1db0-437e-9152-fcfedfb61756"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""3797a63b-564f-4df4-845e-fc5e53e63965"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29cc7e96-e0e3-4f92-a32e-639dd9778e12"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootWaterGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""784a6aae-bb63-443d-b545-94bf5603c44c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootNormalGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""1545206a-5d40-407e-99c2-1bb78edf43c8"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlantAllSeeds"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c1f23c82-9cc7-417b-9716-8d7393e265c3"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlantAllSeeds"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""4c95f07e-e441-494a-a10c-43ab22f43504"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlantAllSeeds"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e824a6b8-aa42-4b0f-b201-5ef034b4152a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RefillWaterGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8baabc3-b736-47f3-9c97-d5c52f397af4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WaterPlants"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2b5dad6-f9ae-4dd1-bda7-0a76a289933b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bab5f878-782e-4894-9a08-02f3ec2cc0db"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateWaterGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58f3e0f2-c198-41ec-938e-dba76f0b9858"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateNormalGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2edc20f8-682c-4c5b-9d44-f7dbfd6fb9b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUpItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99a396b2-44d8-4bab-b8ec-f4e1c81c2bc0"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83b31a2a-2ef6-4b1a-b526-8b38aad37526"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""e7ab3767-69b3-4337-aba5-ca86e4d676ff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8466c4b-d373-4261-8b1d-2dfed7c964d8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c38586a-eea4-471e-8c6c-ad80b117f028"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c3f40416-9c83-4fea-a232-6c637fcf4302"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""631222f8-bac5-4f7c-b697-0129f60748c7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""cbfdac05-f2ea-4f8e-900c-fafa0b93e99a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""02929b81-76e0-4f06-af0d-87621d2ddeca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""544468d3-c90a-436c-800a-b614dab80917"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2a43fb07-271d-4b26-a989-6662474d9c6c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3ea7bac2-4137-4fe8-9a11-7d362ddd850f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""GameManager"",
            ""id"": ""0e60f556-fc41-4003-899b-af130a1e2fb2"",
            ""actions"": [
                {
                    ""name"": ""PauseScreen"",
                    ""type"": ""Button"",
                    ""id"": ""064cda95-05dd-432c-9558-a6ad428f58a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9185effa-f964-445a-8c68-e455f351b816"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventorySaveLoad"",
            ""id"": ""dfe4d862-ad7a-482e-903e-79324c244189"",
            ""actions"": [
                {
                    ""name"": ""SaveInventory"",
                    ""type"": ""Button"",
                    ""id"": ""f041bd69-2b73-477d-8377-64f44671fcd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadInventory"",
                    ""type"": ""Button"",
                    ""id"": ""d70bb079-1a5c-4c2b-ba3e-4486f46f1f4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4fe45f5-825d-419b-88ee-edf183bce101"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06c41863-ec91-4ec0-a85c-66bf7889a340"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NPCInteractions"",
            ""id"": ""5f9d9c3a-4508-4dcb-9d33-f7e1207f344f"",
            ""actions"": [
                {
                    ""name"": ""Continue Dialogue"",
                    ""type"": ""Button"",
                    ""id"": ""820b5cae-1df9-42e7-b736-da47bdb07947"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2c3a9d5-5d1a-4429-9eee-76146e63000c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Dialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Land
        m_Land = asset.FindActionMap("Land", throwIfNotFound: true);
        m_Land_ShootWaterGun = m_Land.FindAction("ShootWaterGun", throwIfNotFound: true);
        m_Land_ShootNormalGun = m_Land.FindAction("ShootNormalGun", throwIfNotFound: true);
        m_Land_Move = m_Land.FindAction("Move", throwIfNotFound: true);
        m_Land_Run = m_Land.FindAction("Run", throwIfNotFound: true);
        m_Land_PlantAllSeeds = m_Land.FindAction("PlantAllSeeds", throwIfNotFound: true);
        m_Land_RefillWaterGun = m_Land.FindAction("RefillWaterGun", throwIfNotFound: true);
        m_Land_WaterPlants = m_Land.FindAction("WaterPlants", throwIfNotFound: true);
        m_Land_ActivateWaterGun = m_Land.FindAction("ActivateWaterGun", throwIfNotFound: true);
        m_Land_ActivateNormalGun = m_Land.FindAction("ActivateNormalGun", throwIfNotFound: true);
        m_Land_PickUpItem = m_Land.FindAction("PickUpItem", throwIfNotFound: true);
        m_Land_ToggleInventory = m_Land.FindAction("ToggleInventory", throwIfNotFound: true);
        m_Land_MousePosition = m_Land.FindAction("MousePosition", throwIfNotFound: true);
        // GameManager
        m_GameManager = asset.FindActionMap("GameManager", throwIfNotFound: true);
        m_GameManager_PauseScreen = m_GameManager.FindAction("PauseScreen", throwIfNotFound: true);
        // InventorySaveLoad
        m_InventorySaveLoad = asset.FindActionMap("InventorySaveLoad", throwIfNotFound: true);
        m_InventorySaveLoad_SaveInventory = m_InventorySaveLoad.FindAction("SaveInventory", throwIfNotFound: true);
        m_InventorySaveLoad_LoadInventory = m_InventorySaveLoad.FindAction("LoadInventory", throwIfNotFound: true);
        // NPCInteractions
        m_NPCInteractions = asset.FindActionMap("NPCInteractions", throwIfNotFound: true);
        m_NPCInteractions_ContinueDialogue = m_NPCInteractions.FindAction("Continue Dialogue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Land
    private readonly InputActionMap m_Land;
    private ILandActions m_LandActionsCallbackInterface;
    private readonly InputAction m_Land_ShootWaterGun;
    private readonly InputAction m_Land_ShootNormalGun;
    private readonly InputAction m_Land_Move;
    private readonly InputAction m_Land_Run;
    private readonly InputAction m_Land_PlantAllSeeds;
    private readonly InputAction m_Land_RefillWaterGun;
    private readonly InputAction m_Land_WaterPlants;
    private readonly InputAction m_Land_ActivateWaterGun;
    private readonly InputAction m_Land_ActivateNormalGun;
    private readonly InputAction m_Land_PickUpItem;
    private readonly InputAction m_Land_ToggleInventory;
    private readonly InputAction m_Land_MousePosition;
    public struct LandActions
    {
        private @InputMap m_Wrapper;
        public LandActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootWaterGun => m_Wrapper.m_Land_ShootWaterGun;
        public InputAction @ShootNormalGun => m_Wrapper.m_Land_ShootNormalGun;
        public InputAction @Move => m_Wrapper.m_Land_Move;
        public InputAction @Run => m_Wrapper.m_Land_Run;
        public InputAction @PlantAllSeeds => m_Wrapper.m_Land_PlantAllSeeds;
        public InputAction @RefillWaterGun => m_Wrapper.m_Land_RefillWaterGun;
        public InputAction @WaterPlants => m_Wrapper.m_Land_WaterPlants;
        public InputAction @ActivateWaterGun => m_Wrapper.m_Land_ActivateWaterGun;
        public InputAction @ActivateNormalGun => m_Wrapper.m_Land_ActivateNormalGun;
        public InputAction @PickUpItem => m_Wrapper.m_Land_PickUpItem;
        public InputAction @ToggleInventory => m_Wrapper.m_Land_ToggleInventory;
        public InputAction @MousePosition => m_Wrapper.m_Land_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Land; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LandActions set) { return set.Get(); }
        public void SetCallbacks(ILandActions instance)
        {
            if (m_Wrapper.m_LandActionsCallbackInterface != null)
            {
                @ShootWaterGun.started -= m_Wrapper.m_LandActionsCallbackInterface.OnShootWaterGun;
                @ShootWaterGun.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnShootWaterGun;
                @ShootWaterGun.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnShootWaterGun;
                @ShootNormalGun.started -= m_Wrapper.m_LandActionsCallbackInterface.OnShootNormalGun;
                @ShootNormalGun.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnShootNormalGun;
                @ShootNormalGun.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnShootNormalGun;
                @Move.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_LandActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnRun;
                @PlantAllSeeds.started -= m_Wrapper.m_LandActionsCallbackInterface.OnPlantAllSeeds;
                @PlantAllSeeds.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnPlantAllSeeds;
                @PlantAllSeeds.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnPlantAllSeeds;
                @RefillWaterGun.started -= m_Wrapper.m_LandActionsCallbackInterface.OnRefillWaterGun;
                @RefillWaterGun.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnRefillWaterGun;
                @RefillWaterGun.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnRefillWaterGun;
                @WaterPlants.started -= m_Wrapper.m_LandActionsCallbackInterface.OnWaterPlants;
                @WaterPlants.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnWaterPlants;
                @WaterPlants.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnWaterPlants;
                @ActivateWaterGun.started -= m_Wrapper.m_LandActionsCallbackInterface.OnActivateWaterGun;
                @ActivateWaterGun.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnActivateWaterGun;
                @ActivateWaterGun.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnActivateWaterGun;
                @ActivateNormalGun.started -= m_Wrapper.m_LandActionsCallbackInterface.OnActivateNormalGun;
                @ActivateNormalGun.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnActivateNormalGun;
                @ActivateNormalGun.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnActivateNormalGun;
                @PickUpItem.started -= m_Wrapper.m_LandActionsCallbackInterface.OnPickUpItem;
                @PickUpItem.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnPickUpItem;
                @PickUpItem.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnPickUpItem;
                @ToggleInventory.started -= m_Wrapper.m_LandActionsCallbackInterface.OnToggleInventory;
                @ToggleInventory.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnToggleInventory;
                @ToggleInventory.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnToggleInventory;
                @MousePosition.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_LandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShootWaterGun.started += instance.OnShootWaterGun;
                @ShootWaterGun.performed += instance.OnShootWaterGun;
                @ShootWaterGun.canceled += instance.OnShootWaterGun;
                @ShootNormalGun.started += instance.OnShootNormalGun;
                @ShootNormalGun.performed += instance.OnShootNormalGun;
                @ShootNormalGun.canceled += instance.OnShootNormalGun;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @PlantAllSeeds.started += instance.OnPlantAllSeeds;
                @PlantAllSeeds.performed += instance.OnPlantAllSeeds;
                @PlantAllSeeds.canceled += instance.OnPlantAllSeeds;
                @RefillWaterGun.started += instance.OnRefillWaterGun;
                @RefillWaterGun.performed += instance.OnRefillWaterGun;
                @RefillWaterGun.canceled += instance.OnRefillWaterGun;
                @WaterPlants.started += instance.OnWaterPlants;
                @WaterPlants.performed += instance.OnWaterPlants;
                @WaterPlants.canceled += instance.OnWaterPlants;
                @ActivateWaterGun.started += instance.OnActivateWaterGun;
                @ActivateWaterGun.performed += instance.OnActivateWaterGun;
                @ActivateWaterGun.canceled += instance.OnActivateWaterGun;
                @ActivateNormalGun.started += instance.OnActivateNormalGun;
                @ActivateNormalGun.performed += instance.OnActivateNormalGun;
                @ActivateNormalGun.canceled += instance.OnActivateNormalGun;
                @PickUpItem.started += instance.OnPickUpItem;
                @PickUpItem.performed += instance.OnPickUpItem;
                @PickUpItem.canceled += instance.OnPickUpItem;
                @ToggleInventory.started += instance.OnToggleInventory;
                @ToggleInventory.performed += instance.OnToggleInventory;
                @ToggleInventory.canceled += instance.OnToggleInventory;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public LandActions @Land => new LandActions(this);

    // GameManager
    private readonly InputActionMap m_GameManager;
    private IGameManagerActions m_GameManagerActionsCallbackInterface;
    private readonly InputAction m_GameManager_PauseScreen;
    public struct GameManagerActions
    {
        private @InputMap m_Wrapper;
        public GameManagerActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseScreen => m_Wrapper.m_GameManager_PauseScreen;
        public InputActionMap Get() { return m_Wrapper.m_GameManager; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameManagerActions set) { return set.Get(); }
        public void SetCallbacks(IGameManagerActions instance)
        {
            if (m_Wrapper.m_GameManagerActionsCallbackInterface != null)
            {
                @PauseScreen.started -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnPauseScreen;
                @PauseScreen.performed -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnPauseScreen;
                @PauseScreen.canceled -= m_Wrapper.m_GameManagerActionsCallbackInterface.OnPauseScreen;
            }
            m_Wrapper.m_GameManagerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseScreen.started += instance.OnPauseScreen;
                @PauseScreen.performed += instance.OnPauseScreen;
                @PauseScreen.canceled += instance.OnPauseScreen;
            }
        }
    }
    public GameManagerActions @GameManager => new GameManagerActions(this);

    // InventorySaveLoad
    private readonly InputActionMap m_InventorySaveLoad;
    private IInventorySaveLoadActions m_InventorySaveLoadActionsCallbackInterface;
    private readonly InputAction m_InventorySaveLoad_SaveInventory;
    private readonly InputAction m_InventorySaveLoad_LoadInventory;
    public struct InventorySaveLoadActions
    {
        private @InputMap m_Wrapper;
        public InventorySaveLoadActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @SaveInventory => m_Wrapper.m_InventorySaveLoad_SaveInventory;
        public InputAction @LoadInventory => m_Wrapper.m_InventorySaveLoad_LoadInventory;
        public InputActionMap Get() { return m_Wrapper.m_InventorySaveLoad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventorySaveLoadActions set) { return set.Get(); }
        public void SetCallbacks(IInventorySaveLoadActions instance)
        {
            if (m_Wrapper.m_InventorySaveLoadActionsCallbackInterface != null)
            {
                @SaveInventory.started -= m_Wrapper.m_InventorySaveLoadActionsCallbackInterface.OnSaveInventory;
                @SaveInventory.performed -= m_Wrapper.m_InventorySaveLoadActionsCallbackInterface.OnSaveInventory;
                @SaveInventory.canceled -= m_Wrapper.m_InventorySaveLoadActionsCallbackInterface.OnSaveInventory;
                @LoadInventory.started -= m_Wrapper.m_InventorySaveLoadActionsCallbackInterface.OnLoadInventory;
                @LoadInventory.performed -= m_Wrapper.m_InventorySaveLoadActionsCallbackInterface.OnLoadInventory;
                @LoadInventory.canceled -= m_Wrapper.m_InventorySaveLoadActionsCallbackInterface.OnLoadInventory;
            }
            m_Wrapper.m_InventorySaveLoadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SaveInventory.started += instance.OnSaveInventory;
                @SaveInventory.performed += instance.OnSaveInventory;
                @SaveInventory.canceled += instance.OnSaveInventory;
                @LoadInventory.started += instance.OnLoadInventory;
                @LoadInventory.performed += instance.OnLoadInventory;
                @LoadInventory.canceled += instance.OnLoadInventory;
            }
        }
    }
    public InventorySaveLoadActions @InventorySaveLoad => new InventorySaveLoadActions(this);

    // NPCInteractions
    private readonly InputActionMap m_NPCInteractions;
    private INPCInteractionsActions m_NPCInteractionsActionsCallbackInterface;
    private readonly InputAction m_NPCInteractions_ContinueDialogue;
    public struct NPCInteractionsActions
    {
        private @InputMap m_Wrapper;
        public NPCInteractionsActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContinueDialogue => m_Wrapper.m_NPCInteractions_ContinueDialogue;
        public InputActionMap Get() { return m_Wrapper.m_NPCInteractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NPCInteractionsActions set) { return set.Get(); }
        public void SetCallbacks(INPCInteractionsActions instance)
        {
            if (m_Wrapper.m_NPCInteractionsActionsCallbackInterface != null)
            {
                @ContinueDialogue.started -= m_Wrapper.m_NPCInteractionsActionsCallbackInterface.OnContinueDialogue;
                @ContinueDialogue.performed -= m_Wrapper.m_NPCInteractionsActionsCallbackInterface.OnContinueDialogue;
                @ContinueDialogue.canceled -= m_Wrapper.m_NPCInteractionsActionsCallbackInterface.OnContinueDialogue;
            }
            m_Wrapper.m_NPCInteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ContinueDialogue.started += instance.OnContinueDialogue;
                @ContinueDialogue.performed += instance.OnContinueDialogue;
                @ContinueDialogue.canceled += instance.OnContinueDialogue;
            }
        }
    }
    public NPCInteractionsActions @NPCInteractions => new NPCInteractionsActions(this);
    public interface ILandActions
    {
        void OnShootWaterGun(InputAction.CallbackContext context);
        void OnShootNormalGun(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnPlantAllSeeds(InputAction.CallbackContext context);
        void OnRefillWaterGun(InputAction.CallbackContext context);
        void OnWaterPlants(InputAction.CallbackContext context);
        void OnActivateWaterGun(InputAction.CallbackContext context);
        void OnActivateNormalGun(InputAction.CallbackContext context);
        void OnPickUpItem(InputAction.CallbackContext context);
        void OnToggleInventory(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IGameManagerActions
    {
        void OnPauseScreen(InputAction.CallbackContext context);
    }
    public interface IInventorySaveLoadActions
    {
        void OnSaveInventory(InputAction.CallbackContext context);
        void OnLoadInventory(InputAction.CallbackContext context);
    }
    public interface INPCInteractionsActions
    {
        void OnContinueDialogue(InputAction.CallbackContext context);
    }
}
